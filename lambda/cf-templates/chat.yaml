---
# bundle exec autostacker24 update --template lambda/cf-templates/chat.yaml --stack lambda-chat-TEAM_NAME --param TeamName=TEAM_NAME
# bundle exec autostacker24 delete --stack lambda-chat-TEAM_NAME
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  TeamName:
    Type: String

Resources:

  ChatDynamoDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${TeamName}-chat"
      AttributeDefinitions:
      - AttributeName: "timestamp"
        AttributeType: "N"
      - AttributeName: "username"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "timestamp"
        KeyType: "HASH"
      - AttributeName: "username"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

  LambdaReadChatRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "*"

  LambdaReadChat:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        "ZipFile": !Sub >
          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

          exports.handler = (event, context, callback) => {
            console.log("try to load chat");
            var params = {
                TableName: "${TeamName}-chat",
                Limit: 10,
            };

            dynamodb.scan(params, function(err, data) {
                callback(null, {
                    input: event,
                    err: err,
                    output: data
                });
            });
          };
      Description: "A read chat function"
      FunctionName: "LambdaReadChat"
      Handler: "index.handler"
      Role:
        Fn::GetAtt: [LambdaReadChatRole, "Arn"]
      Runtime: "nodejs6.10"

  LambdaReadChatPermissionForApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt: [LambdaReadChat, "Arn"]
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ChatApi"}, "/*"]]

  LambdaWriteChatRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                Resource: "*"

  LambdaWriteChat:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        "ZipFile": !Sub >
          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

          exports.handler = (event, context, callback) => {
            console.log('Event:', JSON.stringify(event));
            console.log("try to save message");

            var timestamp = new Date().getTime().toString();
            dynamodb.putItem({
                "TableName": "${TeamName}-chat",
                "Item" : {
                    "timestamp": {"N": timestamp },
                    "username": {"S": event.username },
                    "message": {"S": event.message}
                }
            }, function(err, data) {
                if (err) {
                    console.log(JSON.stringify(err));
                    callback('putting item failed: ' + err);
                }
                else {
                    console.log('success: ' + JSON.stringify(data));
                }
            });
          };
      Description: "A chat write function"
      FunctionName: "LambdaWriteChat"
      Handler: "index.handler"
      Role:
        Fn::GetAtt: [LambdaWriteChatRole, "Arn"]
      Runtime: "nodejs6.10"

  LambdaWriteChatPermissionForApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt: [LambdaWriteChat, "Arn"]
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ChatApi"}, "/*"]]

  ChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "Chat API"
      Description: "API used for chatting"
      FailOnWarnings : "true"

  ApiResourceChat:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatApi
      ParentId:
        Fn::GetAtt: [ChatApi, "RootResourceId"]
      PathPart: "chat"

  ReadChatRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join: ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaReadChat", "Arn"]}, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ApiResourceChat
      RestApiId: !Ref ChatApi
      MethodResponses:
        - StatusCode: 200

  WriteChatRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join: ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaWriteChat", "Arn"]}, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          "application/json": $input.body
      ResourceId: !Ref ApiResourceChat
      RestApiId: !Ref ChatApi
      MethodResponses:
        - StatusCode: 200

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ ReadChatRequest ]
    Properties:
      RestApiId: !Ref ChatApi
      StageName: "DummyStage"

  ChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
      "RestApiId": !Ref ChatApi
      "StageName": "LATEST"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ["ApiGatewayCloudWatchLogsRole", "Arn"]

  ApiGatewayCloudWatchLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"
